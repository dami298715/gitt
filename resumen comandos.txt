pwd...................me indica en donde estoy situado
git status......... indica los cambios realizados
git commit -m "mensaje"........ es para guardar los cambios
git add (dodumento)...... agrega un archivo
git add -A.............. agrega todo. se hace antes del commit para agregar los cambios
$ git checkout asldkjfaslñdkjf .... lleva al commit
git log.............................muestra todos los commit
$ git checkout master .... lleva al ultimo commit
git reset.................. mata los commit
git reset soft............. no toca el codigo
$ git log > commits.txt..................genera un txt con loc commits
git status......... indica los cambios realizados
git commit -m "mensaje"........ es para guardar los cambios
git add (dodumento)...... agrega un archivo
git add -A.............. agrega todo. se hace antes del commit para agregar los cambios
$ git checkout asldkjfaslñdkjf .... lleva al commit
git log.............................muestra todos los commit
$ git checkout master .... lleva al ultimo commit
git reset.................. mata los commit
git reset soft............. no toca el codigo

$ git log > commits.txt..................genera un txt con loc commits

RAMAS
git merge help..........................se hace master la rama help
git branch hola......................creo una rama llamada hola
git branch -hola--------------------elimino la rama hola

GITHUB
git remote add origin lsdkfjañsldkfj.... para conecta el proyecto a github
git remote -v............................ compobar
git remote remoce origin.....................para quitarlo
git push origin master.......................pasa la rama origen a github
git clone (direccion)........................clona un directorio de github, en la carpeta seleccionada de la pc

-los ISSUE son para informar tareas pendientes en github
Los MILESTONES son grupos de issues que se aplican a un proyecto, caracteritica o periodo de tiempo
se puede colocar una fecha maxima para la solucion. luego se coloca el issue dentro del milestone
-los LABELS son una manera de organizar diferentes tipos de problemas con etiquetas. para facil visualizacion
-ASSUGNEES es para asignar un issue a algun participante del proyecto

-Los TAGS son simples puentos especificos en la historia de nuestro proyecto y se usan para 
marcar alguna version del mismo.
git puch origin --tags..............sube todas las tags
-Las TAGS ANOTADAS se almacenan como objetos y tienen informacion
git tag -a v1.0 -m "mensaje" (codigo sha en caso que no sea referido al ultimo commit)G
-Las TAGS LIGERAS son con poca informacion
git tag v1.0



-git push origin master -f.................forza a que se realize un cambio (sin que hallan cambios)

*******************TRABAJO EN EQUIPO*******************************
-WORKFLOW...............fujos de trabajo para trabajar en quipo.
1-se crea una nueva organizacion.
2-invitara las personar de proyecto.
3-cambiar los permisos del los participantes, para que puedan editar
4-trasferir el repositorio del perfil a la nueva organizacion (setting->transfer)
5-los praticipantes clonan el repositorio(git clone http...)

RAMAS OCULTAS (subir los commits)
1-git branch -a.............muestra las ramas ocultas
2-$-git fech origin............bajamos los cambios de github a la rama oculta
3-$git merge (rama oculta).....fuciona la rama oculta con la master. convinando
los commit de los demas participantes. aqui convinamos nuestros cambios tambien
4-git push ogigin master........subo a gib la rama master (los demas tendran que vajar mis cambios)

---para bajar los commits de otros participantes
1-git remote -v...............muesta las conixiones
2-git remote add origin httpxxxx.......conectar con el repositorio de github
3-git fech origin......................para sasar los cambios a la rama oculta
4-git marge origin/master..............se pasaron los cambios de la rama oculta a la master (ya se tiene los cambios de los demas)


--------------los participantes cambian la misma linea
1-git push origin master........ no lo permite por que no tenemos el codigo actualizado
2-git fetch origin.........
3-git merge irigin/master.......aparece un conflicto, (se edito la misma linea)
4- manual marge.... hay que corregir el conflicto manualmente. git marca los conflictos
en el docigo. HEAD es el ultimo commit(de otro) y origin/master es lo que hicimos nosotros
hay q ver cual es el que queda y borrarlo manualmente
5-git add -A
6-git commit -m "solucion comflicto"
7- git push origin master
8-los otros bajan los combios nuevos
9-git fetch origin
10-git merege origin master


-----------ptoyectos con terceros (sin ser parte del equipo)--------
FORK....pasa un repositorio al nuestro en github(no es clone)
1-Se busca el repositorio al cual se quiere ayudar y se hace clic en FORK
2-


**********************github pages************
podemos generar un sitio web a partir d e nuestras organizacion o proyecto
1-crear un repositorio nobre.github.io
2-git clone
3-codigo
4-git push
5-el dominio es mobre.github.io


*************deployment*********
llaves SSH sirve para conectarse al servidor sin tener que poner la constraseña a cada rato

ssh-keygen-----------genera una llave ssh localizada en el home
ls -rf...............ver todos los archivos ocultos
cd .ssh..........se entra en la carpta para ver la llave publica y la privada
cat id_rsa.pub..............nos muestra unos caracteres. se copian y se pegna en github->configuracion->ssh
en titulo se puede poner el dipositivo en uso (notebbok lenovo)... 
Esto va a permitir realizar los cambios sin que pida la contraseña
git remote add origin (ssh del proyecto)
(volver a ver bien https://www.youtube.com/watch?v=Q5kQmlslOwA&list=PL9xYXqvLX2kMUrXTvDY6GI2hgacfy0rId&index=9)







